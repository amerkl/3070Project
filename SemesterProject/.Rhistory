ggplot(data = LSUFootball) +
geom_point(mapping = aes(x = GameAttendance, y = LSUPoints, color = Outcome, size = 9)) +
ggtitle("LSU Points Scored by Game Attendance", "Colored by Outcome")
ggplot(data = LSUFootball) +
geom_point(mapping = aes(x = GameAttendance, y = LSUPoints, color = Outcome, size = 9)) +
ggtitle("LSU Points Scored by Game Attendance", "Colored by Outcome")
filter_(JoinedData$Outcome, "NA")
#Count of Crime Type per LSU Outcome**** COMPLETE
ggplot(data=subset(JoinedData, !is.na(Outcome)), mapping = aes(x=crime, fill=Outcome)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)) -> co
co+facet_grid(vars(Outcome))
library(RSocrata)
library(tidyverse)
token <- "NDto4CJ4JBrcMyuBGCp4NiXs5"
OriginalData <- read.socrata("https://data.brla.gov/resource/5rji-ddnu.json", app_token = token)
OriginalData %>%
select('offense_date', 'crime', 'a_c', 'district') -> AllCrime
AllCrime %>%
filter(str_detect(offense_date, "2018")) %>%
mutate(offense_date = lubridate::ymd(offense_date)) -> BRCrime
#LSUFootball Upload
LSUFootball <- read_csv(here::here("Data","2018LSUFootballSchedule.csv"),
col_types = cols(Date = col_date(format = "%m/%d/%Y"),
EndTime = col_skip(), GameAttendance = col_number(),
LSUPoints = col_number(), OpponentPoints = col_number(),
SpecialEvent = col_logical(), StartTime = col_skip()))
#mean(LSUFootball$LSUPoints)
#meanfunction
full_join(BRCrime, LSUFootball, by = c("offense_date" = "Date")) -> JoinedData
ggplot(data=subset(JoinedData, !is.na(district)), mapping = aes(x=crime, fill=district)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Total Crime by Type per District","Colored by Outcome")+
xlab("Total Crime")+
ylab("Type of Crime")
#Total 2018 Crime by District
ggplot(data=JoinedData, mapping = aes(x=district, fill = crime)) +
geom_bar()
ggplot(data=subset(JoinedData, !is.na(Outcome)), mapping = aes(x=offense_date))+
geom_bar() ->p
p+facet_grid(vars(crime))+
ggtitle("Crime Count per District during Football Season")
install.packages("plotly")
library(plotly)
library(RSocrata)
# Chunk 1: setup
library(tidyverse)
library(flexdashboard)
library(plotly)
# Chunk 2
dtYear <- read_csv(file = 'https://raw.githubusercontent.com/fivethirtyeight/data/master/terrorism/eu_terrorism_fatalities_by_country.csv') %>%
tidyr::gather('state', 'casualties', - iyear)
dt <- dtYear %>%
group_by(state) %>% summarise(total = sum(casualties))
# Chunk 3
statesNames <- setNames(unique(dt$state), unique(dt$state)) %>% as.list()
#drop down menu for the 1st plot
selectInput("state1", label = h4("State 1"),
choices = statesNames,
selected = 'Belgium')
#dropdown menu for the second (uncomment and fill the ...)
selectInput("state2", label = h4("State 2"),
choices = statesNames,
selected = 'France')
# Chunk 4
renderPlot({
#create a logical variable named `selected` that is TRUE if a country is selected in either one of the drop-down menus and FALSE otherwise. To extract the selected value use input$selectInputID e.g., input$state1
dt %>%  mutate(selected  = ... %in%  ....) %>%
ggplot(aes(x = state, y = total, fill = selected)) +
geom_col(show.legend = F) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Chunk 5
#create a function to plot a linechart given a dataset `df` and a country name `country`
statePlot <- function(df, country) {
.....
}
renderPlot({
statePlot(...)
})
# Chunk 6
renderPlot({
statePlot(dtYear, country = input$state2)
})
library(tidyverse)
library(flexdashboard)
library(plotly)
dtYear <- read_csv(file = 'https://raw.githubusercontent.com/fivethirtyeight/data/master/terrorism/eu_terrorism_fatalities_by_country.csv') %>%
tidyr::gather('state', 'casualties', - iyear)
statesNames <- setNames(unique(dt$state), unique(dt$state)) %>% as.list()
#drop down menu for the 1st plot
selectInput("state1", label = h4("State 1"),
choices = statesNames,
selected = 'Belgium')
---
title: "Terrorism in Europe"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
editor_options:
chunk_output_type: console
runtime: shiny
---
```{r setup, include=FALSE}
library(tidyverse)
library(flexdashboard)
library(plotly)
```
```{r}
dtYear <- read_csv(file = 'https://raw.githubusercontent.com/fivethirtyeight/data/master/terrorism/eu_terrorism_fatalities_by_country.csv') %>%
tidyr::gather('state', 'casualties', - iyear)
dt <- dtYear %>%
group_by(state) %>% summarise(total = sum(casualties))
```
Inputs {.sidebar}
-------------------------------------
```{r}
statesNames <- setNames(unique(dt$state), unique(dt$state)) %>% as.list()
#drop down menu for the 1st plot
selectInput("state1", label = h4("State 1"),
choices = statesNames,
selected = 'Belgium')
#dropdown menu for the second (uncomment and fill the ...)
selectInput("state2", label = h4("State 2"),
choices = statesNames,
selected = 'France')
```
Column {data-width=650}
-----------------------------------------------------------------------
### Europe
```{r}
renderPlot({
#create a logical variable named `selected` that is TRUE if a country is selected in either one of the drop-down menus and FALSE otherwise. To extract the selected value use input$selectInputID e.g., input$state1
dt %>%  mutate(selected  = ... %in%  ....) %>%
ggplot(aes(x = state, y = total, fill = selected)) +
geom_col(show.legend = F) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
```
Column {data-width=350}
-----------------------------------------------------------------------
### `r reactive({ input$state1 })`
```{r}
#create a function to plot a linechart given a dataset `df` and a country name `country`
statePlot <- function(df, country) {
.....
}
renderPlot({
statePlot(...)
})
```
### Make this reactive using reactive({})
```{r}
renderPlot({
statePlot(dtYear, country = input$state2)
})
```
ggplot(data = LSUFootball) +
geom_point(mapping = aes(x = GameAttendance, y = LSUPoints, color = Outcome, size = 9)) +
ggtitle("LSU Points Scored by Game Attendance", "Colored by Outcome")+
xlab("Attendance")+
ylab("LSU Points Scored")
#COMPLETED SCRIPTS
ggplot(data=subset(JoinedData, !is.na(LSUPoints)), mapping = aes(x=Opponent, fill=Outcome)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 45))+
ggtitle("Count of Crimes by LSU Opponents")+
xlab("Opponent Universities")+
ylab("Total Crime")
ggplot(data=subset(JoinedData, !is.na(LSUPoints)), mapping = aes(x=Outcome, fill=crime)) +
geom_bar()+
ggtitle("TotalCrime by LSU Outcome")+
xlab("Crime Type")+
ylab("Total Crime")
ggplot(data=subset(JoinedData, !is.na(Outcome)), mapping = aes(x=crime, fill=Outcome)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90))+
ggtitle("TotalCrime by LSU Outcome")
ggplot(data=subset(JoinedData, !is.na(Outcome)), mapping = aes(x=crime, fill=Outcome)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90))+
ggtitle("TotalCrime by LSU Outcome")+
xlab("Crime Type")+
ylab("Total Crime")
ggplot(data=subset(JoinedData, !is.na(a_c))) +
geom_bar(mapping = aes(x = crime, fill = a_c)) +
ggtitle("Total Crimes for 2018", "Separated by Committed and Attempted") +
theme(axis.text.x = element_text(angle = 90))
ggplot(data=subset(JoinedData, !is.na(a_c))) +
geom_bar(mapping = aes(x = crime, fill = a_c)) +
ggtitle("Total Crimes for 2018", "Separated by Committed and Attempted") +
theme(axis.text.x = element_text(angle = 90))+
xlab("Crime Type")+
ylab("Total Crime")
ggplot(data=JoinedData, mapping = aes(x=district, fill = crime)) +
geom_bar()
ggplot(data=JoinedData, mapping = aes(x=district, fill = crime)) +
geom_bar()+
ggtitle("Crime Count by District","Filtered By Crime Type")+
xlab("District Number")+
ylab("Crime Count")
p+facet_grid(vars(crime))+
ggtitle("Crime Count per District during Football Season")
ggplot(data=JoinedData, mapping = aes(x=district, fill = crime)) +
geom_bar()+
ggtitle("Crime Count by District","Filtered By Crime Type")+
xlab("District Number")+
ylab("Crime Count")
ggplot(data=subset(JoinedData, !is.na(a_c))) +
geom_bar(mapping = aes(x = crime, fill = a_c)) +
ggtitle("Total Crimes for 2018", "Separated by Committed and Attempted") +
theme(axis.text.x = element_text(angle = 90))+
xlab("Crime Type")+
ylab("Total Crime")
knitr::opts_chunk$set(echo = FALSE, message = F)
library(knitr)
library(tidyverse)
library(stringr)
library(here)
source(here("01RScripts","DataWrangle.R"))
ggplot(data = LSUFootball) +
geom_point(mapping = aes(x = int(GameAttendance), y = LSUPoints, color = Outcome, size = 9)) +
ggtitle("Points Scored by Game Attendance", "Colored by Game Outcome") +
xlab("Points Scored") +
ylab("Event Attendance")
integer(GameAttendance)
integer('GameAttendance')
c('GameAttendance')
c('GameAttendance')+
ggplot(data = LSUFootball) +
geom_point(mapping = aes(x = GameAttendance, y = LSUPoints, color = Outcome, size = 9)) +
ggtitle("Points Scored by Game Attendance", "Colored by Game Outcome") +
xlab("Points Scored") +
ylab("Event Attendance")
ggplot(data = LSUFootball) +
geom_point(mapping = aes(x = GameAttendance, y = LSUPoints, color = Outcome, size = 9)) +
ggtitle("Points Scored by Game Attendance", "Colored by Game Outcome") +
xlab("Points Scored") +
ylab("Event Attendance")
ggplot(data=subset(JoinedData, !is.na(district)), mapping = aes(x=crime, fill=district)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Total Crime by Type per District","Colored by Outcome")+
xlab("Total Crime")+
ylab("Type of Crime")
p+facet_grid(vars(crime))+
ggtitle("Crime Count per District during Football Season")
ggplot(data=subset(JoinedData, !is.na(Outcome)), mapping = aes(x=offense_date))+
geom_bar() ->p
p+facet_grid(vars(crime))+
ggtitle("Crime Count per District during Football Season")
library(flexdashboard)
library(shiny)
library(htmlwidgets)
library(dygraphs)
library(tidyverse)
library(dplyr)
library(plotly)
ggplot(data = JoinedData, mapping=aes(x=offense_date)) +
geom_bar(color = 'steelblue') +
geom_segment(x=0,y=120,xend='Jan 2019',yend=120)
ggplot(data = JoinedData, mapping=aes(x=offense_date)) +
geom_bar(color = 'steelblue') +
geom_segment(x=0,y=120,xend='Jan 2019',yend=120)+
theme(axis.text.x = element_text(angle = 90))+
ggtitle("Crime Count per Day for 2018")+
xlab("Crime Date")+
ylab("Crimes Reported")
ggplot(data = JoinedData, mapping=aes(x=offense_date)) +
geom_bar(color = 'steelblue') +
geom_segment(x=0,y=120,xend=0,yend=120) +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Crime Count per Day for 2018") +
xlab("Crime Date") +
ylab("Crimes Reported")
ggplot(data = JoinedData, mapping=aes(x=offense_date)) +
geom_bar(color = 'steelblue') +
geom_segment(x='Jan 2018',y=120,xend='Jan 2019',yend=120) +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Crime Count per Day for 2018") +
xlab("Crime Date") +
ylab("Crimes Reported")
ggplot(data = JoinedData, mapping=aes(x=offense_date)) +
geom_bar(color = 'steelblue') +
geom_segment(x=0,y=120,xend=180,yend=120) +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Crime Count per Day for 2018") +
xlab("Crime Date") +
ylab("Crimes Reported")
is.double(JoinedData$crime)
JoinedData %>%
is.double(crime)
View(JoinedData)
JoinedData %>%
is.double('crime')
JoinedData %>%
is.double('crime')
JoinedData2 <- mutate(JoinedData, crime = as.double(crime))
View(JoinedData2)
glimpse(JoinedData2)
ggplot(data = JoinedData, mapping=aes(x=offense_date)) +
geom_bar(color = 'steelblue') +
theme(axis.text.x = element_text(angle = 90)) +
ggtitle("Crime Count per Day for 2018") +
xlab("Crime Date") +
ylab("Crimes Reported")
#try2
ggplot(data = subset(JoinedData, !is.na(Outcome), mapping = aes(x=offense_date, fill(crime))))+
geom_bar()
